--- netrik-0.15/load.c.old	Wed Jul  3 16:49:06 2002
+++ netrik-0.15/load.c	Wed Jul  3 17:39:05 2002
@@ -122,46 +122,56 @@
 	 break;
 
       case PT_FILE:
+      case PT_UNKNOWN:
+begin_file:      
 	 DMSG(("loading file: %s\n", res->url->path));
-	 res->handle.stream=fopen(res->url->path, "r");
-	 if(res->handle.stream==NULL) {    /* open failed */
-	    fprintf(stderr, "can't open file %s\n", url);
-	    res->type=RES_FAIL;
-	    res->url->proto.type=PT_INTERNAL;    /* don't keep in history */
-	    return res;
-	 }
-	 res->type=RES_FILE;
-	 break;
-
-      case PT_UNKNOWN:    /* assume local file */
-	 DMSG(("loading file: %s\n", res->url->path));
-	 res->handle.stream=fopen(res->url->path, "r");
-	 if(res->handle.stream!=NULL) {    /* could open local file */
-	    res->type=RES_FILE;
-	    res->url->proto.type=PT_FILE;
-	    break;
-	 } else {    /* failed to open local file */
-	    if(res->url->path[0]!='/') {    /* may also be incomplete HTTP URL */
-	       char	x_url[sizeof("http://")+strlen(url)];    /* URL string with prepended protocol specification */
-
-	       DMSG(("can't open local file\ntrying HTTP...\n"));
-	       sprintf(x_url, "http://%s", url);
-
-	       free_url(res->url);
-	       res->url=merge_urls(base_url, x_url);    /* need to parse again */
-	       if(res->url->proto.type==PT_INTERNAL) {    /* couldn't merge URLs */
-		  res->type=RES_FAIL;
-		  return res;
-	       }
-	       /* fallthrough */
-	    } else {    /* can't be HTTP */
-	       fprintf(stderr, "can't open file %s\n", url);
-	       res->type=RES_FAIL;
-	       res->url->proto.type=PT_INTERNAL;    /* don't keep in history */
-	       return res;
-	    }
-	 }
-
+      if (strcmp(strrchr(res->url->path, '.'), ".gz") == 0) {
+	 	/* zcat */
+         char *command = (char *)malloc(strlen(res->url->path)
+          + sizeof("zcat "));
+         if (command) {
+            stpcpy(stpcpy(command, "zcat "), res->url->path);
+            res->handle.stream=popen(command, "r");
+            free(command);
+            if (res->handle.stream==NULL) {
+               res->type=RES_FAIL;
+               res->url->proto.type=PT_INTERNAL;
+               return res;
+            }
+            res->type=RES_PIPE;
+            res->url->proto.type=PT_FILE;
+            return res;
+         }
+         else {
+            res->type=RES_FAIL;
+            res->url->proto.type=PT_INTERNAL;
+            return res;
+         }
+      }			
+      else {
+         res->handle.stream=fopen(res->url->path, "r");
+         if(res->handle.stream==NULL) {    /* open failed */
+            char *new_url =
+               (char *)malloc(strlen(res->url->full_url) + sizeof(".gz"));
+            if (new_url) {
+               stpcpy(stpcpy(new_url, res->url->full_url), ".gz");
+               free(res->url);
+               res->url = merge_urls(base_url, new_url);
+               goto begin_file;
+            }
+            else {
+               res->type=RES_FAIL;
+               res->url->proto.type=PT_INTERNAL;
+               return res;
+            }
+         }  
+			else {
+            res->type=RES_FILE;
+            res->url->proto.type=PT_FILE;
+            break;
+         }
+      }   
+/* http:// must be given explicitly */
       case PT_HTTP:
 	 if(cfg.wget)
 	    init_wget(res);
